// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module ConvolutionInputGenerator1D_2_ConvolutionInputGene_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        in_V_V_TDATA,
        in_V_V_TVALID,
        in_V_V_TREADY,
        out_V_V_TDATA,
        out_V_V_TVALID,
        out_V_V_TREADY
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_pp0_stage0 = 3'd2;
parameter    ap_ST_fsm_state4 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [799:0] in_V_V_TDATA;
input   in_V_V_TVALID;
output   in_V_V_TREADY;
output  [7199:0] out_V_V_TDATA;
output   out_V_V_TVALID;
input   out_V_V_TREADY;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg in_V_V_TREADY;
reg out_V_V_TVALID;

(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    in_V_V_TDATA_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_pp0_stage0;
wire   [0:0] icmp_ln1687_fu_206_p2;
wire   [0:0] icmp_ln1689_fu_221_p2;
wire   [0:0] icmp_ln1725_fu_348_p2;
reg    out_V_V_TDATA_blk_n;
reg    ap_enable_reg_pp0_iter1;
reg   [0:0] icmp_ln1689_reg_1071;
reg   [3:0] i_0_0_reg_161;
reg    ap_predicate_op64_read_state2;
reg    ap_predicate_op77_read_state2;
reg    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
reg    ap_block_state3_io;
reg    ap_block_pp0_stage0_11001;
wire   [3:0] add_ln1687_fu_212_p2;
reg   [31:0] current_block_write_3_reg_1075;
wire   [3:0] trunc_ln1710_fu_230_p1;
reg   [3:0] trunc_ln1710_reg_1081;
wire   [0:0] icmp_ln1711_fu_240_p2;
reg   [0:0] icmp_ln1711_reg_1095;
wire   [0:0] icmp_ln1711_2_fu_258_p2;
reg   [0:0] icmp_ln1711_2_reg_1100;
wire   [0:0] icmp_ln1711_3_fu_276_p2;
reg   [0:0] icmp_ln1711_3_reg_1105;
wire   [0:0] icmp_ln1711_4_fu_288_p2;
reg   [0:0] icmp_ln1711_4_reg_1110;
wire   [0:0] icmp_ln1711_5_fu_300_p2;
reg   [0:0] icmp_ln1711_5_reg_1115;
wire   [0:0] icmp_ln1711_6_fu_306_p2;
reg   [0:0] icmp_ln1711_6_reg_1120;
wire   [0:0] icmp_ln1711_8_fu_312_p2;
reg   [0:0] icmp_ln1711_8_reg_1125;
reg   [0:0] icmp_ln1725_reg_1130;
reg   [799:0] tmp_V_2_reg_1134;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg   [31:0] inp_13_0_fu_92;
wire   [31:0] select_ln1720_fu_330_p3;
wire   [31:0] add_ln1694_fu_447_p2;
reg   [31:0] ofm_y_1_0_fu_96;
wire   [31:0] select_ln1720_1_fu_339_p3;
reg   [31:0] read_block_1_0_fu_100;
wire   [31:0] add_ln1733_fu_357_p2;
wire   [31:0] add_ln1700_fu_473_p2;
reg   [31:0] current_block_write_s_fu_104;
wire   [31:0] select_ln1735_fu_369_p3;
wire   [31:0] select_ln1697_fu_465_p3;
reg   [799:0] inputBuf_0_V_fu_108;
wire   [3:0] trunc_ln321_fu_387_p1;
reg   [799:0] inputBuf_1_V_fu_112;
reg   [799:0] inputBuf_2_V_fu_116;
reg   [799:0] inputBuf_3_V_fu_120;
reg   [799:0] inputBuf_4_V_fu_124;
reg   [799:0] inputBuf_5_V_fu_128;
reg   [799:0] inputBuf_6_V_fu_132;
reg   [799:0] inputBuf_7_V_fu_136;
reg   [799:0] inputBuf_8_V_fu_140;
reg   [799:0] inputBuf_9_V_fu_144;
reg    ap_block_pp0_stage0_01001;
wire   [31:0] add_ln1710_fu_234_p2;
wire   [31:0] add_ln1710_2_fu_252_p2;
wire   [31:0] add_ln1710_3_fu_270_p2;
wire   [31:0] add_ln1710_4_fu_282_p2;
wire   [31:0] add_ln1710_5_fu_294_p2;
wire   [31:0] add_ln1712_fu_246_p2;
wire   [31:0] add_ln1712_2_fu_264_p2;
wire   [31:0] add_ln1719_fu_318_p2;
wire   [0:0] icmp_ln1720_fu_324_p2;
wire   [0:0] icmp_ln1735_fu_363_p2;
wire   [31:0] add_ln1696_fu_453_p2;
wire   [0:0] icmp_ln1697_fu_459_p2;
wire   [3:0] select_ln1711_fu_494_p3;
wire   [3:0] tmp_1_fu_536_p11;
wire   [31:0] add_ln1710_1_fu_562_p2;
wire   [0:0] icmp_ln1711_1_fu_567_p2;
wire   [3:0] xor_ln1711_fu_578_p2;
wire   [3:0] add_ln1711_1_fu_583_p2;
wire   [3:0] tmp_2_fu_596_p11;
wire   [3:0] select_ln1711_2_fu_622_p3;
wire   [3:0] tmp_3_fu_634_p11;
wire   [3:0] select_ln1711_3_fu_660_p3;
wire   [3:0] tmp_4_fu_672_p11;
wire   [3:0] select_ln1711_4_fu_698_p3;
wire   [3:0] tmp_5_fu_710_p11;
wire   [3:0] select_ln1711_5_fu_736_p3;
wire   [3:0] tmp_6_fu_748_p11;
wire   [3:0] select_ln1711_6_fu_774_p3;
wire   [3:0] tmp_7_fu_786_p11;
wire   [31:0] add_ln1712_1_fu_573_p2;
wire   [0:0] icmp_ln1711_7_fu_812_p2;
wire   [3:0] add_ln1711_7_fu_818_p2;
wire   [3:0] tmp_8_fu_831_p11;
wire   [3:0] select_ln1711_8_fu_857_p3;
wire   [3:0] tmp_9_fu_869_p11;
wire   [799:0] tmp_9_fu_869_p12;
wire   [799:0] tmp_8_fu_831_p12;
wire   [799:0] tmp_7_fu_786_p12;
wire   [799:0] tmp_6_fu_748_p12;
wire   [799:0] tmp_5_fu_710_p12;
wire   [799:0] tmp_4_fu_672_p12;
wire   [799:0] tmp_3_fu_634_p12;
wire   [799:0] tmp_2_fu_596_p12;
wire   [799:0] tmp_1_fu_536_p12;
wire    ap_CS_fsm_state4;
reg   [2:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_condition_715;
reg    ap_condition_720;
reg    ap_condition_723;
reg    ap_condition_726;
reg    ap_condition_729;
reg    ap_condition_732;
reg    ap_condition_735;
reg    ap_condition_738;
reg    ap_condition_741;
reg    ap_condition_744;
reg    ap_condition_747;
reg    ap_condition_750;
reg    ap_condition_753;
reg    ap_condition_756;
reg    ap_condition_759;
reg    ap_condition_762;
reg    ap_condition_765;
reg    ap_condition_768;
reg    ap_condition_779;
reg    ap_condition_790;

// power-on initialization
initial begin
#0 ap_CS_fsm = 3'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

ConvolutionInputGenerator1D_2_ConvolutionInputGenerator1D_2_mux_104_800_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 800 ),
    .din1_WIDTH( 800 ),
    .din2_WIDTH( 800 ),
    .din3_WIDTH( 800 ),
    .din4_WIDTH( 800 ),
    .din5_WIDTH( 800 ),
    .din6_WIDTH( 800 ),
    .din7_WIDTH( 800 ),
    .din8_WIDTH( 800 ),
    .din9_WIDTH( 800 ),
    .din10_WIDTH( 4 ),
    .dout_WIDTH( 800 ))
ConvolutionInputGenerator1D_2_mux_104_800_1_1_U1(
    .din0(inputBuf_0_V_fu_108),
    .din1(inputBuf_1_V_fu_112),
    .din2(inputBuf_2_V_fu_116),
    .din3(inputBuf_3_V_fu_120),
    .din4(inputBuf_4_V_fu_124),
    .din5(inputBuf_5_V_fu_128),
    .din6(inputBuf_6_V_fu_132),
    .din7(inputBuf_7_V_fu_136),
    .din8(inputBuf_8_V_fu_140),
    .din9(inputBuf_9_V_fu_144),
    .din10(tmp_1_fu_536_p11),
    .dout(tmp_1_fu_536_p12)
);

ConvolutionInputGenerator1D_2_ConvolutionInputGenerator1D_2_mux_104_800_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 800 ),
    .din1_WIDTH( 800 ),
    .din2_WIDTH( 800 ),
    .din3_WIDTH( 800 ),
    .din4_WIDTH( 800 ),
    .din5_WIDTH( 800 ),
    .din6_WIDTH( 800 ),
    .din7_WIDTH( 800 ),
    .din8_WIDTH( 800 ),
    .din9_WIDTH( 800 ),
    .din10_WIDTH( 4 ),
    .dout_WIDTH( 800 ))
ConvolutionInputGenerator1D_2_mux_104_800_1_1_U2(
    .din0(inputBuf_0_V_fu_108),
    .din1(inputBuf_1_V_fu_112),
    .din2(inputBuf_2_V_fu_116),
    .din3(inputBuf_3_V_fu_120),
    .din4(inputBuf_4_V_fu_124),
    .din5(inputBuf_5_V_fu_128),
    .din6(inputBuf_6_V_fu_132),
    .din7(inputBuf_7_V_fu_136),
    .din8(inputBuf_8_V_fu_140),
    .din9(inputBuf_9_V_fu_144),
    .din10(tmp_2_fu_596_p11),
    .dout(tmp_2_fu_596_p12)
);

ConvolutionInputGenerator1D_2_ConvolutionInputGenerator1D_2_mux_104_800_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 800 ),
    .din1_WIDTH( 800 ),
    .din2_WIDTH( 800 ),
    .din3_WIDTH( 800 ),
    .din4_WIDTH( 800 ),
    .din5_WIDTH( 800 ),
    .din6_WIDTH( 800 ),
    .din7_WIDTH( 800 ),
    .din8_WIDTH( 800 ),
    .din9_WIDTH( 800 ),
    .din10_WIDTH( 4 ),
    .dout_WIDTH( 800 ))
ConvolutionInputGenerator1D_2_mux_104_800_1_1_U3(
    .din0(inputBuf_0_V_fu_108),
    .din1(inputBuf_1_V_fu_112),
    .din2(inputBuf_2_V_fu_116),
    .din3(inputBuf_3_V_fu_120),
    .din4(inputBuf_4_V_fu_124),
    .din5(inputBuf_5_V_fu_128),
    .din6(inputBuf_6_V_fu_132),
    .din7(inputBuf_7_V_fu_136),
    .din8(inputBuf_8_V_fu_140),
    .din9(inputBuf_9_V_fu_144),
    .din10(tmp_3_fu_634_p11),
    .dout(tmp_3_fu_634_p12)
);

ConvolutionInputGenerator1D_2_ConvolutionInputGenerator1D_2_mux_104_800_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 800 ),
    .din1_WIDTH( 800 ),
    .din2_WIDTH( 800 ),
    .din3_WIDTH( 800 ),
    .din4_WIDTH( 800 ),
    .din5_WIDTH( 800 ),
    .din6_WIDTH( 800 ),
    .din7_WIDTH( 800 ),
    .din8_WIDTH( 800 ),
    .din9_WIDTH( 800 ),
    .din10_WIDTH( 4 ),
    .dout_WIDTH( 800 ))
ConvolutionInputGenerator1D_2_mux_104_800_1_1_U4(
    .din0(inputBuf_0_V_fu_108),
    .din1(inputBuf_1_V_fu_112),
    .din2(inputBuf_2_V_fu_116),
    .din3(inputBuf_3_V_fu_120),
    .din4(inputBuf_4_V_fu_124),
    .din5(inputBuf_5_V_fu_128),
    .din6(inputBuf_6_V_fu_132),
    .din7(inputBuf_7_V_fu_136),
    .din8(inputBuf_8_V_fu_140),
    .din9(inputBuf_9_V_fu_144),
    .din10(tmp_4_fu_672_p11),
    .dout(tmp_4_fu_672_p12)
);

ConvolutionInputGenerator1D_2_ConvolutionInputGenerator1D_2_mux_104_800_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 800 ),
    .din1_WIDTH( 800 ),
    .din2_WIDTH( 800 ),
    .din3_WIDTH( 800 ),
    .din4_WIDTH( 800 ),
    .din5_WIDTH( 800 ),
    .din6_WIDTH( 800 ),
    .din7_WIDTH( 800 ),
    .din8_WIDTH( 800 ),
    .din9_WIDTH( 800 ),
    .din10_WIDTH( 4 ),
    .dout_WIDTH( 800 ))
ConvolutionInputGenerator1D_2_mux_104_800_1_1_U5(
    .din0(inputBuf_0_V_fu_108),
    .din1(inputBuf_1_V_fu_112),
    .din2(inputBuf_2_V_fu_116),
    .din3(inputBuf_3_V_fu_120),
    .din4(inputBuf_4_V_fu_124),
    .din5(inputBuf_5_V_fu_128),
    .din6(inputBuf_6_V_fu_132),
    .din7(inputBuf_7_V_fu_136),
    .din8(inputBuf_8_V_fu_140),
    .din9(inputBuf_9_V_fu_144),
    .din10(tmp_5_fu_710_p11),
    .dout(tmp_5_fu_710_p12)
);

ConvolutionInputGenerator1D_2_ConvolutionInputGenerator1D_2_mux_104_800_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 800 ),
    .din1_WIDTH( 800 ),
    .din2_WIDTH( 800 ),
    .din3_WIDTH( 800 ),
    .din4_WIDTH( 800 ),
    .din5_WIDTH( 800 ),
    .din6_WIDTH( 800 ),
    .din7_WIDTH( 800 ),
    .din8_WIDTH( 800 ),
    .din9_WIDTH( 800 ),
    .din10_WIDTH( 4 ),
    .dout_WIDTH( 800 ))
ConvolutionInputGenerator1D_2_mux_104_800_1_1_U6(
    .din0(inputBuf_0_V_fu_108),
    .din1(inputBuf_1_V_fu_112),
    .din2(inputBuf_2_V_fu_116),
    .din3(inputBuf_3_V_fu_120),
    .din4(inputBuf_4_V_fu_124),
    .din5(inputBuf_5_V_fu_128),
    .din6(inputBuf_6_V_fu_132),
    .din7(inputBuf_7_V_fu_136),
    .din8(inputBuf_8_V_fu_140),
    .din9(inputBuf_9_V_fu_144),
    .din10(tmp_6_fu_748_p11),
    .dout(tmp_6_fu_748_p12)
);

ConvolutionInputGenerator1D_2_ConvolutionInputGenerator1D_2_mux_104_800_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 800 ),
    .din1_WIDTH( 800 ),
    .din2_WIDTH( 800 ),
    .din3_WIDTH( 800 ),
    .din4_WIDTH( 800 ),
    .din5_WIDTH( 800 ),
    .din6_WIDTH( 800 ),
    .din7_WIDTH( 800 ),
    .din8_WIDTH( 800 ),
    .din9_WIDTH( 800 ),
    .din10_WIDTH( 4 ),
    .dout_WIDTH( 800 ))
ConvolutionInputGenerator1D_2_mux_104_800_1_1_U7(
    .din0(inputBuf_0_V_fu_108),
    .din1(inputBuf_1_V_fu_112),
    .din2(inputBuf_2_V_fu_116),
    .din3(inputBuf_3_V_fu_120),
    .din4(inputBuf_4_V_fu_124),
    .din5(inputBuf_5_V_fu_128),
    .din6(inputBuf_6_V_fu_132),
    .din7(inputBuf_7_V_fu_136),
    .din8(inputBuf_8_V_fu_140),
    .din9(inputBuf_9_V_fu_144),
    .din10(tmp_7_fu_786_p11),
    .dout(tmp_7_fu_786_p12)
);

ConvolutionInputGenerator1D_2_ConvolutionInputGenerator1D_2_mux_104_800_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 800 ),
    .din1_WIDTH( 800 ),
    .din2_WIDTH( 800 ),
    .din3_WIDTH( 800 ),
    .din4_WIDTH( 800 ),
    .din5_WIDTH( 800 ),
    .din6_WIDTH( 800 ),
    .din7_WIDTH( 800 ),
    .din8_WIDTH( 800 ),
    .din9_WIDTH( 800 ),
    .din10_WIDTH( 4 ),
    .dout_WIDTH( 800 ))
ConvolutionInputGenerator1D_2_mux_104_800_1_1_U8(
    .din0(inputBuf_0_V_fu_108),
    .din1(inputBuf_1_V_fu_112),
    .din2(inputBuf_2_V_fu_116),
    .din3(inputBuf_3_V_fu_120),
    .din4(inputBuf_4_V_fu_124),
    .din5(inputBuf_5_V_fu_128),
    .din6(inputBuf_6_V_fu_132),
    .din7(inputBuf_7_V_fu_136),
    .din8(inputBuf_8_V_fu_140),
    .din9(inputBuf_9_V_fu_144),
    .din10(tmp_8_fu_831_p11),
    .dout(tmp_8_fu_831_p12)
);

ConvolutionInputGenerator1D_2_ConvolutionInputGenerator1D_2_mux_104_800_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 800 ),
    .din1_WIDTH( 800 ),
    .din2_WIDTH( 800 ),
    .din3_WIDTH( 800 ),
    .din4_WIDTH( 800 ),
    .din5_WIDTH( 800 ),
    .din6_WIDTH( 800 ),
    .din7_WIDTH( 800 ),
    .din8_WIDTH( 800 ),
    .din9_WIDTH( 800 ),
    .din10_WIDTH( 4 ),
    .dout_WIDTH( 800 ))
ConvolutionInputGenerator1D_2_mux_104_800_1_1_U9(
    .din0(inputBuf_0_V_fu_108),
    .din1(inputBuf_1_V_fu_112),
    .din2(inputBuf_2_V_fu_116),
    .din3(inputBuf_3_V_fu_120),
    .din4(inputBuf_4_V_fu_124),
    .din5(inputBuf_5_V_fu_128),
    .din6(inputBuf_6_V_fu_132),
    .din7(inputBuf_7_V_fu_136),
    .din8(inputBuf_8_V_fu_140),
    .din9(inputBuf_9_V_fu_144),
    .din10(tmp_9_fu_869_p11),
    .dout(tmp_9_fu_869_p12)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln1689_fu_221_p2 == 1'd1) & (icmp_ln1687_fu_206_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        current_block_write_s_fu_104 <= select_ln1697_fu_465_p3;
    end else if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln1725_fu_348_p2 == 1'd1) & (icmp_ln1689_fu_221_p2 == 1'd0) & (icmp_ln1687_fu_206_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        current_block_write_s_fu_104 <= select_ln1735_fu_369_p3;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        current_block_write_s_fu_104 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_0_0_reg_161 <= 4'd0;
    end else if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln1687_fu_206_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_0_0_reg_161 <= add_ln1687_fu_212_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln1689_fu_221_p2 == 1'd1) & (icmp_ln1687_fu_206_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        inp_13_0_fu_92 <= add_ln1694_fu_447_p2;
    end else if ((((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln1725_fu_348_p2 == 1'd0) & (icmp_ln1689_fu_221_p2 == 1'd0) & (icmp_ln1687_fu_206_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln1725_fu_348_p2 == 1'd1) & (icmp_ln1689_fu_221_p2 == 1'd0) & (icmp_ln1687_fu_206_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        inp_13_0_fu_92 <= select_ln1720_fu_330_p3;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        inp_13_0_fu_92 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((1'b1 == ap_condition_720)) begin
            inputBuf_0_V_fu_108 <= tmp_V_2_reg_1134;
        end else if ((1'b1 == ap_condition_715)) begin
            inputBuf_0_V_fu_108 <= in_V_V_TDATA;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((1'b1 == ap_condition_726)) begin
            inputBuf_1_V_fu_112 <= tmp_V_2_reg_1134;
        end else if ((1'b1 == ap_condition_723)) begin
            inputBuf_1_V_fu_112 <= in_V_V_TDATA;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((1'b1 == ap_condition_732)) begin
            inputBuf_2_V_fu_116 <= tmp_V_2_reg_1134;
        end else if ((1'b1 == ap_condition_729)) begin
            inputBuf_2_V_fu_116 <= in_V_V_TDATA;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((1'b1 == ap_condition_738)) begin
            inputBuf_3_V_fu_120 <= tmp_V_2_reg_1134;
        end else if ((1'b1 == ap_condition_735)) begin
            inputBuf_3_V_fu_120 <= in_V_V_TDATA;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((1'b1 == ap_condition_744)) begin
            inputBuf_4_V_fu_124 <= tmp_V_2_reg_1134;
        end else if ((1'b1 == ap_condition_741)) begin
            inputBuf_4_V_fu_124 <= in_V_V_TDATA;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((1'b1 == ap_condition_750)) begin
            inputBuf_5_V_fu_128 <= tmp_V_2_reg_1134;
        end else if ((1'b1 == ap_condition_747)) begin
            inputBuf_5_V_fu_128 <= in_V_V_TDATA;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((1'b1 == ap_condition_756)) begin
            inputBuf_6_V_fu_132 <= tmp_V_2_reg_1134;
        end else if ((1'b1 == ap_condition_753)) begin
            inputBuf_6_V_fu_132 <= in_V_V_TDATA;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((1'b1 == ap_condition_762)) begin
            inputBuf_7_V_fu_136 <= tmp_V_2_reg_1134;
        end else if ((1'b1 == ap_condition_759)) begin
            inputBuf_7_V_fu_136 <= in_V_V_TDATA;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((1'b1 == ap_condition_768)) begin
            inputBuf_8_V_fu_140 <= tmp_V_2_reg_1134;
        end else if ((1'b1 == ap_condition_765)) begin
            inputBuf_8_V_fu_140 <= in_V_V_TDATA;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((1'b1 == ap_condition_790)) begin
            inputBuf_9_V_fu_144 <= tmp_V_2_reg_1134;
        end else if ((1'b1 == ap_condition_779)) begin
            inputBuf_9_V_fu_144 <= in_V_V_TDATA;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln1725_fu_348_p2 == 1'd0) & (icmp_ln1689_fu_221_p2 == 1'd0) & (icmp_ln1687_fu_206_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln1725_fu_348_p2 == 1'd1) & (icmp_ln1689_fu_221_p2 == 1'd0) & (icmp_ln1687_fu_206_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        ofm_y_1_0_fu_96 <= select_ln1720_1_fu_339_p3;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ofm_y_1_0_fu_96 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln1689_fu_221_p2 == 1'd1) & (icmp_ln1687_fu_206_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        read_block_1_0_fu_100 <= add_ln1700_fu_473_p2;
    end else if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln1725_fu_348_p2 == 1'd1) & (icmp_ln1689_fu_221_p2 == 1'd0) & (icmp_ln1687_fu_206_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        read_block_1_0_fu_100 <= add_ln1733_fu_357_p2;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        read_block_1_0_fu_100 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln1689_fu_221_p2 == 1'd0) & (icmp_ln1687_fu_206_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        current_block_write_3_reg_1075 <= current_block_write_s_fu_104;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln1687_fu_206_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln1689_reg_1071 <= icmp_ln1689_fu_221_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln1689_fu_221_p2 == 1'd0) & (icmp_ln1687_fu_206_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln1711_2_reg_1100 <= icmp_ln1711_2_fu_258_p2;
        icmp_ln1711_3_reg_1105 <= icmp_ln1711_3_fu_276_p2;
        icmp_ln1711_4_reg_1110 <= icmp_ln1711_4_fu_288_p2;
        icmp_ln1711_5_reg_1115 <= icmp_ln1711_5_fu_300_p2;
        icmp_ln1711_6_reg_1120 <= icmp_ln1711_6_fu_306_p2;
        icmp_ln1711_8_reg_1125 <= icmp_ln1711_8_fu_312_p2;
        icmp_ln1711_reg_1095 <= icmp_ln1711_fu_240_p2;
        icmp_ln1725_reg_1130 <= icmp_ln1725_fu_348_p2;
        trunc_ln1710_reg_1081 <= trunc_ln1710_fu_230_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op64_read_state2 == 1'b1))) begin
        tmp_V_2_reg_1134 <= in_V_V_TDATA;
    end
end

always @ (*) begin
    if ((icmp_ln1687_fu_206_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((((icmp_ln1725_fu_348_p2 == 1'd1) & (icmp_ln1689_fu_221_p2 == 1'd0) & (icmp_ln1687_fu_206_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((icmp_ln1689_fu_221_p2 == 1'd1) & (icmp_ln1687_fu_206_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        in_V_V_TDATA_blk_n = in_V_V_TVALID;
    end else begin
        in_V_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op77_read_state2 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op64_read_state2 == 1'b1)))) begin
        in_V_V_TREADY = 1'b1;
    end else begin
        in_V_V_TREADY = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln1689_reg_1071 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        out_V_V_TDATA_blk_n = out_V_V_TREADY;
    end else begin
        out_V_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln1689_reg_1071 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        out_V_V_TVALID = 1'b1;
    end else begin
        out_V_V_TVALID = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (~((icmp_ln1687_fu_206_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((icmp_ln1687_fu_206_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln1687_fu_212_p2 = (i_0_0_reg_161 + 4'd1);

assign add_ln1694_fu_447_p2 = (inp_13_0_fu_92 + 32'd1);

assign add_ln1696_fu_453_p2 = (current_block_write_s_fu_104 + 32'd1);

assign add_ln1700_fu_473_p2 = (read_block_1_0_fu_100 + 32'd1);

assign add_ln1710_1_fu_562_p2 = (32'd2 + current_block_write_3_reg_1075);

assign add_ln1710_2_fu_252_p2 = (32'd3 + current_block_write_s_fu_104);

assign add_ln1710_3_fu_270_p2 = (32'd4 + current_block_write_s_fu_104);

assign add_ln1710_4_fu_282_p2 = (32'd5 + current_block_write_s_fu_104);

assign add_ln1710_5_fu_294_p2 = (32'd6 + current_block_write_s_fu_104);

assign add_ln1710_fu_234_p2 = (32'd1 + current_block_write_s_fu_104);

assign add_ln1711_1_fu_583_p2 = (4'd2 + trunc_ln1710_reg_1081);

assign add_ln1711_7_fu_818_p2 = ($signed(4'd14) + $signed(trunc_ln1710_reg_1081));

assign add_ln1712_1_fu_573_p2 = (32'd8 + current_block_write_3_reg_1075);

assign add_ln1712_2_fu_264_p2 = (32'd9 + current_block_write_s_fu_104);

assign add_ln1712_fu_246_p2 = (32'd7 + current_block_write_s_fu_104);

assign add_ln1719_fu_318_p2 = (32'd1 + ofm_y_1_0_fu_96);

assign add_ln1733_fu_357_p2 = (read_block_1_0_fu_100 + 32'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_enable_reg_pp0_iter0 == 1'b1) & (((in_V_V_TVALID == 1'b0) & (ap_predicate_op77_read_state2 == 1'b1)) | ((in_V_V_TVALID == 1'b0) & (ap_predicate_op64_read_state2 == 1'b1))));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state3_io)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (((in_V_V_TVALID == 1'b0) & (ap_predicate_op77_read_state2 == 1'b1)) | ((in_V_V_TVALID == 1'b0) & (ap_predicate_op64_read_state2 == 1'b1)))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state3_io)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (((in_V_V_TVALID == 1'b0) & (ap_predicate_op77_read_state2 == 1'b1)) | ((in_V_V_TVALID == 1'b0) & (ap_predicate_op64_read_state2 == 1'b1)))));
end

always @ (*) begin
    ap_block_state2_pp0_stage0_iter0 = (((in_V_V_TVALID == 1'b0) & (ap_predicate_op77_read_state2 == 1'b1)) | ((in_V_V_TVALID == 1'b0) & (ap_predicate_op64_read_state2 == 1'b1)));
end

always @ (*) begin
    ap_block_state3_io = ((icmp_ln1689_reg_1071 == 1'd0) & (out_V_V_TREADY == 1'b0));
end

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_condition_715 = ((icmp_ln1689_fu_221_p2 == 1'd1) & (icmp_ln1687_fu_206_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (trunc_ln321_fu_387_p1 == 4'd0));
end

always @ (*) begin
    ap_condition_720 = ((trunc_ln1710_reg_1081 == 4'd0) & (icmp_ln1725_reg_1130 == 1'd1) & (icmp_ln1689_reg_1071 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_condition_723 = ((icmp_ln1689_fu_221_p2 == 1'd1) & (icmp_ln1687_fu_206_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (trunc_ln321_fu_387_p1 == 4'd1));
end

always @ (*) begin
    ap_condition_726 = ((trunc_ln1710_reg_1081 == 4'd1) & (icmp_ln1725_reg_1130 == 1'd1) & (icmp_ln1689_reg_1071 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_condition_729 = ((icmp_ln1689_fu_221_p2 == 1'd1) & (icmp_ln1687_fu_206_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (trunc_ln321_fu_387_p1 == 4'd2));
end

always @ (*) begin
    ap_condition_732 = ((trunc_ln1710_reg_1081 == 4'd2) & (icmp_ln1725_reg_1130 == 1'd1) & (icmp_ln1689_reg_1071 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_condition_735 = ((icmp_ln1689_fu_221_p2 == 1'd1) & (icmp_ln1687_fu_206_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (trunc_ln321_fu_387_p1 == 4'd3));
end

always @ (*) begin
    ap_condition_738 = ((trunc_ln1710_reg_1081 == 4'd3) & (icmp_ln1725_reg_1130 == 1'd1) & (icmp_ln1689_reg_1071 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_condition_741 = ((icmp_ln1689_fu_221_p2 == 1'd1) & (icmp_ln1687_fu_206_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (trunc_ln321_fu_387_p1 == 4'd4));
end

always @ (*) begin
    ap_condition_744 = ((trunc_ln1710_reg_1081 == 4'd4) & (icmp_ln1725_reg_1130 == 1'd1) & (icmp_ln1689_reg_1071 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_condition_747 = ((icmp_ln1689_fu_221_p2 == 1'd1) & (icmp_ln1687_fu_206_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (trunc_ln321_fu_387_p1 == 4'd5));
end

always @ (*) begin
    ap_condition_750 = ((trunc_ln1710_reg_1081 == 4'd5) & (icmp_ln1725_reg_1130 == 1'd1) & (icmp_ln1689_reg_1071 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_condition_753 = ((icmp_ln1689_fu_221_p2 == 1'd1) & (icmp_ln1687_fu_206_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (trunc_ln321_fu_387_p1 == 4'd6));
end

always @ (*) begin
    ap_condition_756 = ((trunc_ln1710_reg_1081 == 4'd6) & (icmp_ln1725_reg_1130 == 1'd1) & (icmp_ln1689_reg_1071 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_condition_759 = ((icmp_ln1689_fu_221_p2 == 1'd1) & (icmp_ln1687_fu_206_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (trunc_ln321_fu_387_p1 == 4'd7));
end

always @ (*) begin
    ap_condition_762 = ((trunc_ln1710_reg_1081 == 4'd7) & (icmp_ln1725_reg_1130 == 1'd1) & (icmp_ln1689_reg_1071 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_condition_765 = ((icmp_ln1689_fu_221_p2 == 1'd1) & (icmp_ln1687_fu_206_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (trunc_ln321_fu_387_p1 == 4'd8));
end

always @ (*) begin
    ap_condition_768 = ((trunc_ln1710_reg_1081 == 4'd8) & (icmp_ln1725_reg_1130 == 1'd1) & (icmp_ln1689_reg_1071 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_condition_779 = (~(trunc_ln321_fu_387_p1 == 4'd8) & ~(trunc_ln321_fu_387_p1 == 4'd7) & ~(trunc_ln321_fu_387_p1 == 4'd6) & ~(trunc_ln321_fu_387_p1 == 4'd5) & ~(trunc_ln321_fu_387_p1 == 4'd4) & ~(trunc_ln321_fu_387_p1 == 4'd3) & ~(trunc_ln321_fu_387_p1 == 4'd2) & ~(trunc_ln321_fu_387_p1 == 4'd1) & ~(trunc_ln321_fu_387_p1 == 4'd0) & (icmp_ln1689_fu_221_p2 == 1'd1) & (icmp_ln1687_fu_206_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_condition_790 = (~(trunc_ln1710_reg_1081 == 4'd8) & ~(trunc_ln1710_reg_1081 == 4'd7) & ~(trunc_ln1710_reg_1081 == 4'd6) & ~(trunc_ln1710_reg_1081 == 4'd5) & ~(trunc_ln1710_reg_1081 == 4'd4) & ~(trunc_ln1710_reg_1081 == 4'd3) & ~(trunc_ln1710_reg_1081 == 4'd2) & ~(trunc_ln1710_reg_1081 == 4'd1) & ~(trunc_ln1710_reg_1081 == 4'd0) & (icmp_ln1725_reg_1130 == 1'd1) & (icmp_ln1689_reg_1071 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

always @ (*) begin
    ap_predicate_op64_read_state2 = ((icmp_ln1725_fu_348_p2 == 1'd1) & (icmp_ln1689_fu_221_p2 == 1'd0) & (icmp_ln1687_fu_206_p2 == 1'd0));
end

always @ (*) begin
    ap_predicate_op77_read_state2 = ((icmp_ln1689_fu_221_p2 == 1'd1) & (icmp_ln1687_fu_206_p2 == 1'd0));
end

assign icmp_ln1687_fu_206_p2 = ((i_0_0_reg_161 == 4'd14) ? 1'b1 : 1'b0);

assign icmp_ln1689_fu_221_p2 = ((inp_13_0_fu_92 < 32'd9) ? 1'b1 : 1'b0);

assign icmp_ln1697_fu_459_p2 = ((add_ln1696_fu_453_p2 == 32'd10) ? 1'b1 : 1'b0);

assign icmp_ln1711_1_fu_567_p2 = ((add_ln1710_1_fu_562_p2 > 32'd9) ? 1'b1 : 1'b0);

assign icmp_ln1711_2_fu_258_p2 = ((add_ln1710_2_fu_252_p2 > 32'd9) ? 1'b1 : 1'b0);

assign icmp_ln1711_3_fu_276_p2 = ((add_ln1710_3_fu_270_p2 > 32'd9) ? 1'b1 : 1'b0);

assign icmp_ln1711_4_fu_288_p2 = ((add_ln1710_4_fu_282_p2 > 32'd9) ? 1'b1 : 1'b0);

assign icmp_ln1711_5_fu_300_p2 = ((add_ln1710_5_fu_294_p2 > 32'd9) ? 1'b1 : 1'b0);

assign icmp_ln1711_6_fu_306_p2 = ((add_ln1712_fu_246_p2 > 32'd9) ? 1'b1 : 1'b0);

assign icmp_ln1711_7_fu_812_p2 = ((add_ln1712_1_fu_573_p2 > 32'd9) ? 1'b1 : 1'b0);

assign icmp_ln1711_8_fu_312_p2 = ((add_ln1712_2_fu_264_p2 > 32'd9) ? 1'b1 : 1'b0);

assign icmp_ln1711_fu_240_p2 = ((add_ln1710_fu_234_p2 > 32'd9) ? 1'b1 : 1'b0);

assign icmp_ln1720_fu_324_p2 = ((add_ln1719_fu_318_p2 == 32'd5) ? 1'b1 : 1'b0);

assign icmp_ln1725_fu_348_p2 = ((read_block_1_0_fu_100 < 32'd13) ? 1'b1 : 1'b0);

assign icmp_ln1735_fu_363_p2 = ((add_ln1710_fu_234_p2 == 32'd10) ? 1'b1 : 1'b0);

assign out_V_V_TDATA = {{{{{{{{{tmp_9_fu_869_p12}, {tmp_8_fu_831_p12}}, {tmp_7_fu_786_p12}}, {tmp_6_fu_748_p12}}, {tmp_5_fu_710_p12}}, {tmp_4_fu_672_p12}}, {tmp_3_fu_634_p12}}, {tmp_2_fu_596_p12}}, {tmp_1_fu_536_p12}};

assign select_ln1697_fu_465_p3 = ((icmp_ln1697_fu_459_p2[0:0] === 1'b1) ? 32'd0 : add_ln1696_fu_453_p2);

assign select_ln1711_2_fu_622_p3 = ((icmp_ln1711_2_reg_1100[0:0] === 1'b1) ? 4'd9 : 4'd3);

assign select_ln1711_3_fu_660_p3 = ((icmp_ln1711_3_reg_1105[0:0] === 1'b1) ? 4'd10 : 4'd4);

assign select_ln1711_4_fu_698_p3 = ((icmp_ln1711_4_reg_1110[0:0] === 1'b1) ? 4'd11 : 4'd5);

assign select_ln1711_5_fu_736_p3 = ((icmp_ln1711_5_reg_1115[0:0] === 1'b1) ? 4'd12 : 4'd6);

assign select_ln1711_6_fu_774_p3 = ((icmp_ln1711_6_reg_1120[0:0] === 1'b1) ? 4'd13 : 4'd7);

assign select_ln1711_8_fu_857_p3 = ((icmp_ln1711_8_reg_1125[0:0] === 1'b1) ? 4'd15 : 4'd9);

assign select_ln1711_fu_494_p3 = ((icmp_ln1711_reg_1095[0:0] === 1'b1) ? 4'd7 : 4'd1);

assign select_ln1720_1_fu_339_p3 = ((icmp_ln1720_fu_324_p2[0:0] === 1'b1) ? 32'd0 : add_ln1719_fu_318_p2);

assign select_ln1720_fu_330_p3 = ((icmp_ln1720_fu_324_p2[0:0] === 1'b1) ? 32'd0 : inp_13_0_fu_92);

assign select_ln1735_fu_369_p3 = ((icmp_ln1735_fu_363_p2[0:0] === 1'b1) ? 32'd0 : add_ln1710_fu_234_p2);

assign tmp_1_fu_536_p11 = (select_ln1711_fu_494_p3 + trunc_ln1710_reg_1081);

assign tmp_2_fu_596_p11 = ((icmp_ln1711_1_fu_567_p2[0:0] === 1'b1) ? xor_ln1711_fu_578_p2 : add_ln1711_1_fu_583_p2);

assign tmp_3_fu_634_p11 = (select_ln1711_2_fu_622_p3 + trunc_ln1710_reg_1081);

assign tmp_4_fu_672_p11 = (select_ln1711_3_fu_660_p3 + trunc_ln1710_reg_1081);

assign tmp_5_fu_710_p11 = (select_ln1711_4_fu_698_p3 + trunc_ln1710_reg_1081);

assign tmp_6_fu_748_p11 = (select_ln1711_5_fu_736_p3 + trunc_ln1710_reg_1081);

assign tmp_7_fu_786_p11 = (select_ln1711_6_fu_774_p3 + trunc_ln1710_reg_1081);

assign tmp_8_fu_831_p11 = ((icmp_ln1711_7_fu_812_p2[0:0] === 1'b1) ? add_ln1711_7_fu_818_p2 : xor_ln1711_fu_578_p2);

assign tmp_9_fu_869_p11 = (select_ln1711_8_fu_857_p3 + trunc_ln1710_reg_1081);

assign trunc_ln1710_fu_230_p1 = current_block_write_s_fu_104[3:0];

assign trunc_ln321_fu_387_p1 = current_block_write_s_fu_104[3:0];

assign xor_ln1711_fu_578_p2 = (trunc_ln1710_reg_1081 ^ 4'd8);

endmodule //ConvolutionInputGenerator1D_2_ConvolutionInputGene_1
