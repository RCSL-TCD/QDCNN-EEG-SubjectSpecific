// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module StreamingMaxPool_Batch_0_StreamingMaxPool_Pre (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        in_V_V_TDATA,
        in_V_V_TVALID,
        in_V_V_TREADY,
        out_V_V_TDATA,
        out_V_V_TVALID,
        out_V_V_TREADY
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_pp0_stage0 = 3'd2;
parameter    ap_ST_fsm_state4 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [199:0] in_V_V_TDATA;
input   in_V_V_TVALID;
output   in_V_V_TREADY;
output  [199:0] out_V_V_TDATA;
output   out_V_V_TVALID;
input   out_V_V_TREADY;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg in_V_V_TREADY;
reg out_V_V_TVALID;

(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    in_V_V_TDATA_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_pp0_stage0;
wire   [0:0] icmp_ln254_fu_456_p2;
reg    out_V_V_TDATA_blk_n;
reg    ap_enable_reg_pp0_iter1;
reg   [0:0] icmp_ln256_1_reg_1482;
reg   [9:0] indvar_flatten_reg_159;
reg   [7:0] buf_V_24_1_reg_170;
reg   [7:0] buf_V_23_1_reg_181;
reg   [7:0] buf_V_22_1_reg_192;
reg   [7:0] buf_V_21_1_reg_203;
reg   [7:0] buf_V_20_1_reg_214;
reg   [7:0] buf_V_19_1_reg_225;
reg   [7:0] buf_V_18_1_reg_236;
reg   [7:0] buf_V_17_1_reg_247;
reg   [7:0] buf_V_16_1_reg_258;
reg   [7:0] buf_V_15_1_reg_269;
reg   [7:0] buf_V_14_1_reg_280;
reg   [7:0] buf_V_13_1_reg_291;
reg   [7:0] buf_V_12_1_reg_302;
reg   [7:0] buf_V_11_1_reg_313;
reg   [7:0] buf_V_10_1_reg_324;
reg   [7:0] buf_V_9_1_reg_335;
reg   [7:0] buf_V_8_1_reg_346;
reg   [7:0] buf_V_7_1_reg_357;
reg   [7:0] buf_V_6_1_reg_368;
reg   [7:0] buf_V_5_1_reg_379;
reg   [7:0] buf_V_4_1_reg_390;
reg   [7:0] buf_V_3_1_reg_401;
reg   [7:0] buf_V_2_1_reg_412;
reg   [7:0] buf_V_1_1_reg_423;
reg   [7:0] buf_V_0_1_reg_434;
reg   [2:0] kx_0_reg_445;
reg   [0:0] icmp_ln254_reg_1318;
reg    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
reg    ap_block_state3_io;
reg    ap_block_pp0_stage0_11001;
wire   [9:0] add_ln254_fu_462_p2;
wire   [7:0] select_ln265_fu_684_p3;
reg   [7:0] select_ln265_reg_1327;
wire   [7:0] select_ln265_1_fu_708_p3;
reg   [7:0] select_ln265_1_reg_1333;
wire   [7:0] select_ln265_2_fu_732_p3;
reg   [7:0] select_ln265_2_reg_1339;
wire   [7:0] select_ln265_3_fu_756_p3;
reg   [7:0] select_ln265_3_reg_1345;
wire   [7:0] select_ln265_4_fu_780_p3;
reg   [7:0] select_ln265_4_reg_1351;
wire   [7:0] select_ln265_5_fu_804_p3;
reg   [7:0] select_ln265_5_reg_1357;
wire   [7:0] select_ln265_6_fu_828_p3;
reg   [7:0] select_ln265_6_reg_1363;
wire   [7:0] select_ln265_7_fu_852_p3;
reg   [7:0] select_ln265_7_reg_1369;
wire   [7:0] select_ln265_8_fu_876_p3;
reg   [7:0] select_ln265_8_reg_1375;
wire   [7:0] select_ln265_9_fu_900_p3;
reg   [7:0] select_ln265_9_reg_1381;
wire   [7:0] select_ln265_10_fu_924_p3;
reg   [7:0] select_ln265_10_reg_1387;
wire   [7:0] select_ln265_11_fu_948_p3;
reg   [7:0] select_ln265_11_reg_1393;
wire   [7:0] select_ln265_12_fu_972_p3;
reg   [7:0] select_ln265_12_reg_1399;
wire   [7:0] select_ln265_13_fu_996_p3;
reg   [7:0] select_ln265_13_reg_1405;
wire   [7:0] select_ln265_14_fu_1020_p3;
reg   [7:0] select_ln265_14_reg_1411;
wire   [7:0] select_ln265_15_fu_1044_p3;
reg   [7:0] select_ln265_15_reg_1417;
wire   [7:0] select_ln265_16_fu_1068_p3;
reg   [7:0] select_ln265_16_reg_1423;
wire   [7:0] select_ln265_17_fu_1092_p3;
reg   [7:0] select_ln265_17_reg_1429;
wire   [7:0] select_ln265_18_fu_1116_p3;
reg   [7:0] select_ln265_18_reg_1435;
wire   [7:0] select_ln265_19_fu_1140_p3;
reg   [7:0] select_ln265_19_reg_1441;
wire   [7:0] select_ln265_20_fu_1164_p3;
reg   [7:0] select_ln265_20_reg_1447;
wire   [7:0] select_ln265_21_fu_1188_p3;
reg   [7:0] select_ln265_21_reg_1453;
wire   [7:0] select_ln265_22_fu_1212_p3;
reg   [7:0] select_ln265_22_reg_1459;
wire   [7:0] select_ln265_23_fu_1236_p3;
reg   [7:0] select_ln265_23_reg_1465;
wire   [7:0] select_ln265_24_fu_1260_p3;
reg   [7:0] select_ln265_24_reg_1471;
wire   [2:0] kx_fu_1274_p3;
reg   [2:0] kx_reg_1477;
wire   [0:0] icmp_ln256_1_fu_1282_p2;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg   [7:0] ap_phi_mux_buf_V_24_1_phi_fu_174_p4;
reg   [7:0] ap_phi_mux_buf_V_23_1_phi_fu_185_p4;
reg   [7:0] ap_phi_mux_buf_V_22_1_phi_fu_196_p4;
reg   [7:0] ap_phi_mux_buf_V_21_1_phi_fu_207_p4;
reg   [7:0] ap_phi_mux_buf_V_20_1_phi_fu_218_p4;
reg   [7:0] ap_phi_mux_buf_V_19_1_phi_fu_229_p4;
reg   [7:0] ap_phi_mux_buf_V_18_1_phi_fu_240_p4;
reg   [7:0] ap_phi_mux_buf_V_17_1_phi_fu_251_p4;
reg   [7:0] ap_phi_mux_buf_V_16_1_phi_fu_262_p4;
reg   [7:0] ap_phi_mux_buf_V_15_1_phi_fu_273_p4;
reg   [7:0] ap_phi_mux_buf_V_14_1_phi_fu_284_p4;
reg   [7:0] ap_phi_mux_buf_V_13_1_phi_fu_295_p4;
reg   [7:0] ap_phi_mux_buf_V_12_1_phi_fu_306_p4;
reg   [7:0] ap_phi_mux_buf_V_11_1_phi_fu_317_p4;
reg   [7:0] ap_phi_mux_buf_V_10_1_phi_fu_328_p4;
reg   [7:0] ap_phi_mux_buf_V_9_1_phi_fu_339_p4;
reg   [7:0] ap_phi_mux_buf_V_8_1_phi_fu_350_p4;
reg   [7:0] ap_phi_mux_buf_V_7_1_phi_fu_361_p4;
reg   [7:0] ap_phi_mux_buf_V_6_1_phi_fu_372_p4;
reg   [7:0] ap_phi_mux_buf_V_5_1_phi_fu_383_p4;
reg   [7:0] ap_phi_mux_buf_V_4_1_phi_fu_394_p4;
reg   [7:0] ap_phi_mux_buf_V_3_1_phi_fu_405_p4;
reg   [7:0] ap_phi_mux_buf_V_2_1_phi_fu_416_p4;
reg   [7:0] ap_phi_mux_buf_V_1_1_phi_fu_427_p4;
reg   [7:0] ap_phi_mux_buf_V_0_1_phi_fu_438_p4;
reg   [2:0] ap_phi_mux_kx_0_phi_fu_449_p4;
reg    ap_block_pp0_stage0_01001;
wire   [0:0] icmp_ln256_fu_468_p2;
wire   [7:0] buf_0_V_fu_674_p1;
wire   [7:0] select_ln256_24_fu_666_p3;
wire   [0:0] icmp_ln895_fu_678_p2;
wire   [7:0] buf_1_V_fu_692_p4;
wire   [7:0] select_ln256_23_fu_658_p3;
wire   [0:0] icmp_ln895_1_fu_702_p2;
wire   [7:0] buf_2_V_fu_716_p4;
wire   [7:0] select_ln256_22_fu_650_p3;
wire   [0:0] icmp_ln895_2_fu_726_p2;
wire   [7:0] buf_3_V_fu_740_p4;
wire   [7:0] select_ln256_21_fu_642_p3;
wire   [0:0] icmp_ln895_3_fu_750_p2;
wire   [7:0] buf_4_V_fu_764_p4;
wire   [7:0] select_ln256_20_fu_634_p3;
wire   [0:0] icmp_ln895_4_fu_774_p2;
wire   [7:0] buf_5_V_fu_788_p4;
wire   [7:0] select_ln256_19_fu_626_p3;
wire   [0:0] icmp_ln895_5_fu_798_p2;
wire   [7:0] buf_6_V_fu_812_p4;
wire   [7:0] select_ln256_18_fu_618_p3;
wire   [0:0] icmp_ln895_6_fu_822_p2;
wire   [7:0] buf_7_V_fu_836_p4;
wire   [7:0] select_ln256_17_fu_610_p3;
wire   [0:0] icmp_ln895_7_fu_846_p2;
wire   [7:0] buf_8_V_fu_860_p4;
wire   [7:0] select_ln256_16_fu_602_p3;
wire   [0:0] icmp_ln895_8_fu_870_p2;
wire   [7:0] buf_9_V_fu_884_p4;
wire   [7:0] select_ln256_15_fu_594_p3;
wire   [0:0] icmp_ln895_9_fu_894_p2;
wire   [7:0] buf_10_V_fu_908_p4;
wire   [7:0] select_ln256_14_fu_586_p3;
wire   [0:0] icmp_ln895_10_fu_918_p2;
wire   [7:0] buf_11_V_fu_932_p4;
wire   [7:0] select_ln256_13_fu_578_p3;
wire   [0:0] icmp_ln895_11_fu_942_p2;
wire   [7:0] buf_12_V_fu_956_p4;
wire   [7:0] select_ln256_12_fu_570_p3;
wire   [0:0] icmp_ln895_12_fu_966_p2;
wire   [7:0] buf_13_V_fu_980_p4;
wire   [7:0] select_ln256_11_fu_562_p3;
wire   [0:0] icmp_ln895_13_fu_990_p2;
wire   [7:0] buf_14_V_fu_1004_p4;
wire   [7:0] select_ln256_10_fu_554_p3;
wire   [0:0] icmp_ln895_14_fu_1014_p2;
wire   [7:0] buf_15_V_fu_1028_p4;
wire   [7:0] select_ln256_9_fu_546_p3;
wire   [0:0] icmp_ln895_15_fu_1038_p2;
wire   [7:0] buf_16_V_fu_1052_p4;
wire   [7:0] select_ln256_8_fu_538_p3;
wire   [0:0] icmp_ln895_16_fu_1062_p2;
wire   [7:0] buf_17_V_fu_1076_p4;
wire   [7:0] select_ln256_7_fu_530_p3;
wire   [0:0] icmp_ln895_17_fu_1086_p2;
wire   [7:0] buf_18_V_fu_1100_p4;
wire   [7:0] select_ln256_6_fu_522_p3;
wire   [0:0] icmp_ln895_18_fu_1110_p2;
wire   [7:0] buf_19_V_fu_1124_p4;
wire   [7:0] select_ln256_5_fu_514_p3;
wire   [0:0] icmp_ln895_19_fu_1134_p2;
wire   [7:0] buf_20_V_fu_1148_p4;
wire   [7:0] select_ln256_4_fu_506_p3;
wire   [0:0] icmp_ln895_20_fu_1158_p2;
wire   [7:0] buf_21_V_fu_1172_p4;
wire   [7:0] select_ln256_3_fu_498_p3;
wire   [0:0] icmp_ln895_21_fu_1182_p2;
wire   [7:0] buf_22_V_fu_1196_p4;
wire   [7:0] select_ln256_2_fu_490_p3;
wire   [0:0] icmp_ln895_22_fu_1206_p2;
wire   [7:0] buf_23_V_fu_1220_p4;
wire   [7:0] select_ln256_1_fu_482_p3;
wire   [0:0] icmp_ln895_23_fu_1230_p2;
wire   [7:0] buf_24_V_fu_1244_p4;
wire   [7:0] select_ln256_fu_474_p3;
wire   [0:0] icmp_ln895_24_fu_1254_p2;
wire   [2:0] add_ln256_fu_1268_p2;
wire    ap_CS_fsm_state4;
reg   [2:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_CS_fsm = 3'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln254_reg_1318 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        buf_V_0_1_reg_434 <= select_ln265_reg_1327;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        buf_V_0_1_reg_434 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln254_reg_1318 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        buf_V_10_1_reg_324 <= select_ln265_10_reg_1387;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        buf_V_10_1_reg_324 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln254_reg_1318 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        buf_V_11_1_reg_313 <= select_ln265_11_reg_1393;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        buf_V_11_1_reg_313 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln254_reg_1318 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        buf_V_12_1_reg_302 <= select_ln265_12_reg_1399;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        buf_V_12_1_reg_302 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln254_reg_1318 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        buf_V_13_1_reg_291 <= select_ln265_13_reg_1405;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        buf_V_13_1_reg_291 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln254_reg_1318 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        buf_V_14_1_reg_280 <= select_ln265_14_reg_1411;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        buf_V_14_1_reg_280 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln254_reg_1318 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        buf_V_15_1_reg_269 <= select_ln265_15_reg_1417;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        buf_V_15_1_reg_269 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln254_reg_1318 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        buf_V_16_1_reg_258 <= select_ln265_16_reg_1423;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        buf_V_16_1_reg_258 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln254_reg_1318 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        buf_V_17_1_reg_247 <= select_ln265_17_reg_1429;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        buf_V_17_1_reg_247 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln254_reg_1318 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        buf_V_18_1_reg_236 <= select_ln265_18_reg_1435;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        buf_V_18_1_reg_236 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln254_reg_1318 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        buf_V_19_1_reg_225 <= select_ln265_19_reg_1441;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        buf_V_19_1_reg_225 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln254_reg_1318 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        buf_V_1_1_reg_423 <= select_ln265_1_reg_1333;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        buf_V_1_1_reg_423 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln254_reg_1318 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        buf_V_20_1_reg_214 <= select_ln265_20_reg_1447;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        buf_V_20_1_reg_214 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln254_reg_1318 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        buf_V_21_1_reg_203 <= select_ln265_21_reg_1453;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        buf_V_21_1_reg_203 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln254_reg_1318 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        buf_V_22_1_reg_192 <= select_ln265_22_reg_1459;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        buf_V_22_1_reg_192 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln254_reg_1318 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        buf_V_23_1_reg_181 <= select_ln265_23_reg_1465;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        buf_V_23_1_reg_181 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln254_reg_1318 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        buf_V_24_1_reg_170 <= select_ln265_24_reg_1471;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        buf_V_24_1_reg_170 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln254_reg_1318 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        buf_V_2_1_reg_412 <= select_ln265_2_reg_1339;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        buf_V_2_1_reg_412 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln254_reg_1318 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        buf_V_3_1_reg_401 <= select_ln265_3_reg_1345;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        buf_V_3_1_reg_401 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln254_reg_1318 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        buf_V_4_1_reg_390 <= select_ln265_4_reg_1351;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        buf_V_4_1_reg_390 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln254_reg_1318 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        buf_V_5_1_reg_379 <= select_ln265_5_reg_1357;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        buf_V_5_1_reg_379 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln254_reg_1318 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        buf_V_6_1_reg_368 <= select_ln265_6_reg_1363;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        buf_V_6_1_reg_368 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln254_reg_1318 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        buf_V_7_1_reg_357 <= select_ln265_7_reg_1369;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        buf_V_7_1_reg_357 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln254_reg_1318 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        buf_V_8_1_reg_346 <= select_ln265_8_reg_1375;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        buf_V_8_1_reg_346 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln254_reg_1318 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        buf_V_9_1_reg_335 <= select_ln265_9_reg_1381;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        buf_V_9_1_reg_335 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln254_fu_456_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        indvar_flatten_reg_159 <= add_ln254_fu_462_p2;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten_reg_159 <= 10'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln254_reg_1318 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        kx_0_reg_445 <= kx_reg_1477;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        kx_0_reg_445 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln254_reg_1318 <= icmp_ln254_fu_456_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln254_fu_456_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln256_1_reg_1482 <= icmp_ln256_1_fu_1282_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln254_fu_456_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        kx_reg_1477 <= kx_fu_1274_p3;
        select_ln265_10_reg_1387 <= select_ln265_10_fu_924_p3;
        select_ln265_11_reg_1393 <= select_ln265_11_fu_948_p3;
        select_ln265_12_reg_1399 <= select_ln265_12_fu_972_p3;
        select_ln265_13_reg_1405 <= select_ln265_13_fu_996_p3;
        select_ln265_14_reg_1411 <= select_ln265_14_fu_1020_p3;
        select_ln265_15_reg_1417 <= select_ln265_15_fu_1044_p3;
        select_ln265_16_reg_1423 <= select_ln265_16_fu_1068_p3;
        select_ln265_17_reg_1429 <= select_ln265_17_fu_1092_p3;
        select_ln265_18_reg_1435 <= select_ln265_18_fu_1116_p3;
        select_ln265_19_reg_1441 <= select_ln265_19_fu_1140_p3;
        select_ln265_1_reg_1333 <= select_ln265_1_fu_708_p3;
        select_ln265_20_reg_1447 <= select_ln265_20_fu_1164_p3;
        select_ln265_21_reg_1453 <= select_ln265_21_fu_1188_p3;
        select_ln265_22_reg_1459 <= select_ln265_22_fu_1212_p3;
        select_ln265_23_reg_1465 <= select_ln265_23_fu_1236_p3;
        select_ln265_24_reg_1471 <= select_ln265_24_fu_1260_p3;
        select_ln265_2_reg_1339 <= select_ln265_2_fu_732_p3;
        select_ln265_3_reg_1345 <= select_ln265_3_fu_756_p3;
        select_ln265_4_reg_1351 <= select_ln265_4_fu_780_p3;
        select_ln265_5_reg_1357 <= select_ln265_5_fu_804_p3;
        select_ln265_6_reg_1363 <= select_ln265_6_fu_828_p3;
        select_ln265_7_reg_1369 <= select_ln265_7_fu_852_p3;
        select_ln265_8_reg_1375 <= select_ln265_8_fu_876_p3;
        select_ln265_9_reg_1381 <= select_ln265_9_fu_900_p3;
        select_ln265_reg_1327 <= select_ln265_fu_684_p3;
    end
end

always @ (*) begin
    if ((icmp_ln254_fu_456_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln254_reg_1318 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_buf_V_0_1_phi_fu_438_p4 = select_ln265_reg_1327;
    end else begin
        ap_phi_mux_buf_V_0_1_phi_fu_438_p4 = buf_V_0_1_reg_434;
    end
end

always @ (*) begin
    if (((icmp_ln254_reg_1318 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_buf_V_10_1_phi_fu_328_p4 = select_ln265_10_reg_1387;
    end else begin
        ap_phi_mux_buf_V_10_1_phi_fu_328_p4 = buf_V_10_1_reg_324;
    end
end

always @ (*) begin
    if (((icmp_ln254_reg_1318 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_buf_V_11_1_phi_fu_317_p4 = select_ln265_11_reg_1393;
    end else begin
        ap_phi_mux_buf_V_11_1_phi_fu_317_p4 = buf_V_11_1_reg_313;
    end
end

always @ (*) begin
    if (((icmp_ln254_reg_1318 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_buf_V_12_1_phi_fu_306_p4 = select_ln265_12_reg_1399;
    end else begin
        ap_phi_mux_buf_V_12_1_phi_fu_306_p4 = buf_V_12_1_reg_302;
    end
end

always @ (*) begin
    if (((icmp_ln254_reg_1318 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_buf_V_13_1_phi_fu_295_p4 = select_ln265_13_reg_1405;
    end else begin
        ap_phi_mux_buf_V_13_1_phi_fu_295_p4 = buf_V_13_1_reg_291;
    end
end

always @ (*) begin
    if (((icmp_ln254_reg_1318 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_buf_V_14_1_phi_fu_284_p4 = select_ln265_14_reg_1411;
    end else begin
        ap_phi_mux_buf_V_14_1_phi_fu_284_p4 = buf_V_14_1_reg_280;
    end
end

always @ (*) begin
    if (((icmp_ln254_reg_1318 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_buf_V_15_1_phi_fu_273_p4 = select_ln265_15_reg_1417;
    end else begin
        ap_phi_mux_buf_V_15_1_phi_fu_273_p4 = buf_V_15_1_reg_269;
    end
end

always @ (*) begin
    if (((icmp_ln254_reg_1318 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_buf_V_16_1_phi_fu_262_p4 = select_ln265_16_reg_1423;
    end else begin
        ap_phi_mux_buf_V_16_1_phi_fu_262_p4 = buf_V_16_1_reg_258;
    end
end

always @ (*) begin
    if (((icmp_ln254_reg_1318 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_buf_V_17_1_phi_fu_251_p4 = select_ln265_17_reg_1429;
    end else begin
        ap_phi_mux_buf_V_17_1_phi_fu_251_p4 = buf_V_17_1_reg_247;
    end
end

always @ (*) begin
    if (((icmp_ln254_reg_1318 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_buf_V_18_1_phi_fu_240_p4 = select_ln265_18_reg_1435;
    end else begin
        ap_phi_mux_buf_V_18_1_phi_fu_240_p4 = buf_V_18_1_reg_236;
    end
end

always @ (*) begin
    if (((icmp_ln254_reg_1318 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_buf_V_19_1_phi_fu_229_p4 = select_ln265_19_reg_1441;
    end else begin
        ap_phi_mux_buf_V_19_1_phi_fu_229_p4 = buf_V_19_1_reg_225;
    end
end

always @ (*) begin
    if (((icmp_ln254_reg_1318 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_buf_V_1_1_phi_fu_427_p4 = select_ln265_1_reg_1333;
    end else begin
        ap_phi_mux_buf_V_1_1_phi_fu_427_p4 = buf_V_1_1_reg_423;
    end
end

always @ (*) begin
    if (((icmp_ln254_reg_1318 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_buf_V_20_1_phi_fu_218_p4 = select_ln265_20_reg_1447;
    end else begin
        ap_phi_mux_buf_V_20_1_phi_fu_218_p4 = buf_V_20_1_reg_214;
    end
end

always @ (*) begin
    if (((icmp_ln254_reg_1318 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_buf_V_21_1_phi_fu_207_p4 = select_ln265_21_reg_1453;
    end else begin
        ap_phi_mux_buf_V_21_1_phi_fu_207_p4 = buf_V_21_1_reg_203;
    end
end

always @ (*) begin
    if (((icmp_ln254_reg_1318 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_buf_V_22_1_phi_fu_196_p4 = select_ln265_22_reg_1459;
    end else begin
        ap_phi_mux_buf_V_22_1_phi_fu_196_p4 = buf_V_22_1_reg_192;
    end
end

always @ (*) begin
    if (((icmp_ln254_reg_1318 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_buf_V_23_1_phi_fu_185_p4 = select_ln265_23_reg_1465;
    end else begin
        ap_phi_mux_buf_V_23_1_phi_fu_185_p4 = buf_V_23_1_reg_181;
    end
end

always @ (*) begin
    if (((icmp_ln254_reg_1318 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_buf_V_24_1_phi_fu_174_p4 = select_ln265_24_reg_1471;
    end else begin
        ap_phi_mux_buf_V_24_1_phi_fu_174_p4 = buf_V_24_1_reg_170;
    end
end

always @ (*) begin
    if (((icmp_ln254_reg_1318 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_buf_V_2_1_phi_fu_416_p4 = select_ln265_2_reg_1339;
    end else begin
        ap_phi_mux_buf_V_2_1_phi_fu_416_p4 = buf_V_2_1_reg_412;
    end
end

always @ (*) begin
    if (((icmp_ln254_reg_1318 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_buf_V_3_1_phi_fu_405_p4 = select_ln265_3_reg_1345;
    end else begin
        ap_phi_mux_buf_V_3_1_phi_fu_405_p4 = buf_V_3_1_reg_401;
    end
end

always @ (*) begin
    if (((icmp_ln254_reg_1318 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_buf_V_4_1_phi_fu_394_p4 = select_ln265_4_reg_1351;
    end else begin
        ap_phi_mux_buf_V_4_1_phi_fu_394_p4 = buf_V_4_1_reg_390;
    end
end

always @ (*) begin
    if (((icmp_ln254_reg_1318 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_buf_V_5_1_phi_fu_383_p4 = select_ln265_5_reg_1357;
    end else begin
        ap_phi_mux_buf_V_5_1_phi_fu_383_p4 = buf_V_5_1_reg_379;
    end
end

always @ (*) begin
    if (((icmp_ln254_reg_1318 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_buf_V_6_1_phi_fu_372_p4 = select_ln265_6_reg_1363;
    end else begin
        ap_phi_mux_buf_V_6_1_phi_fu_372_p4 = buf_V_6_1_reg_368;
    end
end

always @ (*) begin
    if (((icmp_ln254_reg_1318 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_buf_V_7_1_phi_fu_361_p4 = select_ln265_7_reg_1369;
    end else begin
        ap_phi_mux_buf_V_7_1_phi_fu_361_p4 = buf_V_7_1_reg_357;
    end
end

always @ (*) begin
    if (((icmp_ln254_reg_1318 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_buf_V_8_1_phi_fu_350_p4 = select_ln265_8_reg_1375;
    end else begin
        ap_phi_mux_buf_V_8_1_phi_fu_350_p4 = buf_V_8_1_reg_346;
    end
end

always @ (*) begin
    if (((icmp_ln254_reg_1318 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_buf_V_9_1_phi_fu_339_p4 = select_ln265_9_reg_1381;
    end else begin
        ap_phi_mux_buf_V_9_1_phi_fu_339_p4 = buf_V_9_1_reg_335;
    end
end

always @ (*) begin
    if (((icmp_ln254_reg_1318 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_kx_0_phi_fu_449_p4 = kx_reg_1477;
    end else begin
        ap_phi_mux_kx_0_phi_fu_449_p4 = kx_0_reg_445;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln254_fu_456_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        in_V_V_TDATA_blk_n = in_V_V_TVALID;
    end else begin
        in_V_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln254_fu_456_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        in_V_V_TREADY = 1'b1;
    end else begin
        in_V_V_TREADY = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln256_1_reg_1482 == 1'd1) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        out_V_V_TDATA_blk_n = out_V_V_TREADY;
    end else begin
        out_V_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln256_1_reg_1482 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        out_V_V_TVALID = 1'b1;
    end else begin
        out_V_V_TVALID = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (~((icmp_ln254_fu_456_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((icmp_ln254_fu_456_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln254_fu_462_p2 = (indvar_flatten_reg_159 + 10'd1);

assign add_ln256_fu_1268_p2 = (3'd1 + ap_phi_mux_kx_0_phi_fu_449_p4);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((icmp_ln254_fu_456_p2 == 1'd0) & (in_V_V_TVALID == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state3_io)) | ((icmp_ln254_fu_456_p2 == 1'd0) & (in_V_V_TVALID == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state3_io)) | ((icmp_ln254_fu_456_p2 == 1'd0) & (in_V_V_TVALID == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1)));
end

always @ (*) begin
    ap_block_state2_pp0_stage0_iter0 = ((icmp_ln254_fu_456_p2 == 1'd0) & (in_V_V_TVALID == 1'b0));
end

always @ (*) begin
    ap_block_state3_io = ((icmp_ln256_1_reg_1482 == 1'd1) & (out_V_V_TREADY == 1'b0));
end

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign buf_0_V_fu_674_p1 = in_V_V_TDATA[7:0];

assign buf_10_V_fu_908_p4 = {{in_V_V_TDATA[87:80]}};

assign buf_11_V_fu_932_p4 = {{in_V_V_TDATA[95:88]}};

assign buf_12_V_fu_956_p4 = {{in_V_V_TDATA[103:96]}};

assign buf_13_V_fu_980_p4 = {{in_V_V_TDATA[111:104]}};

assign buf_14_V_fu_1004_p4 = {{in_V_V_TDATA[119:112]}};

assign buf_15_V_fu_1028_p4 = {{in_V_V_TDATA[127:120]}};

assign buf_16_V_fu_1052_p4 = {{in_V_V_TDATA[135:128]}};

assign buf_17_V_fu_1076_p4 = {{in_V_V_TDATA[143:136]}};

assign buf_18_V_fu_1100_p4 = {{in_V_V_TDATA[151:144]}};

assign buf_19_V_fu_1124_p4 = {{in_V_V_TDATA[159:152]}};

assign buf_1_V_fu_692_p4 = {{in_V_V_TDATA[15:8]}};

assign buf_20_V_fu_1148_p4 = {{in_V_V_TDATA[167:160]}};

assign buf_21_V_fu_1172_p4 = {{in_V_V_TDATA[175:168]}};

assign buf_22_V_fu_1196_p4 = {{in_V_V_TDATA[183:176]}};

assign buf_23_V_fu_1220_p4 = {{in_V_V_TDATA[191:184]}};

assign buf_24_V_fu_1244_p4 = {{in_V_V_TDATA[199:192]}};

assign buf_2_V_fu_716_p4 = {{in_V_V_TDATA[23:16]}};

assign buf_3_V_fu_740_p4 = {{in_V_V_TDATA[31:24]}};

assign buf_4_V_fu_764_p4 = {{in_V_V_TDATA[39:32]}};

assign buf_5_V_fu_788_p4 = {{in_V_V_TDATA[47:40]}};

assign buf_6_V_fu_812_p4 = {{in_V_V_TDATA[55:48]}};

assign buf_7_V_fu_836_p4 = {{in_V_V_TDATA[63:56]}};

assign buf_8_V_fu_860_p4 = {{in_V_V_TDATA[71:64]}};

assign buf_9_V_fu_884_p4 = {{in_V_V_TDATA[79:72]}};

assign icmp_ln254_fu_456_p2 = ((indvar_flatten_reg_159 == 10'd992) ? 1'b1 : 1'b0);

assign icmp_ln256_1_fu_1282_p2 = ((kx_fu_1274_p3 == 3'd4) ? 1'b1 : 1'b0);

assign icmp_ln256_fu_468_p2 = ((ap_phi_mux_kx_0_phi_fu_449_p4 == 3'd4) ? 1'b1 : 1'b0);

assign icmp_ln895_10_fu_918_p2 = ((buf_10_V_fu_908_p4 > select_ln256_14_fu_586_p3) ? 1'b1 : 1'b0);

assign icmp_ln895_11_fu_942_p2 = ((buf_11_V_fu_932_p4 > select_ln256_13_fu_578_p3) ? 1'b1 : 1'b0);

assign icmp_ln895_12_fu_966_p2 = ((buf_12_V_fu_956_p4 > select_ln256_12_fu_570_p3) ? 1'b1 : 1'b0);

assign icmp_ln895_13_fu_990_p2 = ((buf_13_V_fu_980_p4 > select_ln256_11_fu_562_p3) ? 1'b1 : 1'b0);

assign icmp_ln895_14_fu_1014_p2 = ((buf_14_V_fu_1004_p4 > select_ln256_10_fu_554_p3) ? 1'b1 : 1'b0);

assign icmp_ln895_15_fu_1038_p2 = ((buf_15_V_fu_1028_p4 > select_ln256_9_fu_546_p3) ? 1'b1 : 1'b0);

assign icmp_ln895_16_fu_1062_p2 = ((buf_16_V_fu_1052_p4 > select_ln256_8_fu_538_p3) ? 1'b1 : 1'b0);

assign icmp_ln895_17_fu_1086_p2 = ((buf_17_V_fu_1076_p4 > select_ln256_7_fu_530_p3) ? 1'b1 : 1'b0);

assign icmp_ln895_18_fu_1110_p2 = ((buf_18_V_fu_1100_p4 > select_ln256_6_fu_522_p3) ? 1'b1 : 1'b0);

assign icmp_ln895_19_fu_1134_p2 = ((buf_19_V_fu_1124_p4 > select_ln256_5_fu_514_p3) ? 1'b1 : 1'b0);

assign icmp_ln895_1_fu_702_p2 = ((buf_1_V_fu_692_p4 > select_ln256_23_fu_658_p3) ? 1'b1 : 1'b0);

assign icmp_ln895_20_fu_1158_p2 = ((buf_20_V_fu_1148_p4 > select_ln256_4_fu_506_p3) ? 1'b1 : 1'b0);

assign icmp_ln895_21_fu_1182_p2 = ((buf_21_V_fu_1172_p4 > select_ln256_3_fu_498_p3) ? 1'b1 : 1'b0);

assign icmp_ln895_22_fu_1206_p2 = ((buf_22_V_fu_1196_p4 > select_ln256_2_fu_490_p3) ? 1'b1 : 1'b0);

assign icmp_ln895_23_fu_1230_p2 = ((buf_23_V_fu_1220_p4 > select_ln256_1_fu_482_p3) ? 1'b1 : 1'b0);

assign icmp_ln895_24_fu_1254_p2 = ((buf_24_V_fu_1244_p4 > select_ln256_fu_474_p3) ? 1'b1 : 1'b0);

assign icmp_ln895_2_fu_726_p2 = ((buf_2_V_fu_716_p4 > select_ln256_22_fu_650_p3) ? 1'b1 : 1'b0);

assign icmp_ln895_3_fu_750_p2 = ((buf_3_V_fu_740_p4 > select_ln256_21_fu_642_p3) ? 1'b1 : 1'b0);

assign icmp_ln895_4_fu_774_p2 = ((buf_4_V_fu_764_p4 > select_ln256_20_fu_634_p3) ? 1'b1 : 1'b0);

assign icmp_ln895_5_fu_798_p2 = ((buf_5_V_fu_788_p4 > select_ln256_19_fu_626_p3) ? 1'b1 : 1'b0);

assign icmp_ln895_6_fu_822_p2 = ((buf_6_V_fu_812_p4 > select_ln256_18_fu_618_p3) ? 1'b1 : 1'b0);

assign icmp_ln895_7_fu_846_p2 = ((buf_7_V_fu_836_p4 > select_ln256_17_fu_610_p3) ? 1'b1 : 1'b0);

assign icmp_ln895_8_fu_870_p2 = ((buf_8_V_fu_860_p4 > select_ln256_16_fu_602_p3) ? 1'b1 : 1'b0);

assign icmp_ln895_9_fu_894_p2 = ((buf_9_V_fu_884_p4 > select_ln256_15_fu_594_p3) ? 1'b1 : 1'b0);

assign icmp_ln895_fu_678_p2 = ((buf_0_V_fu_674_p1 > select_ln256_24_fu_666_p3) ? 1'b1 : 1'b0);

assign kx_fu_1274_p3 = ((icmp_ln256_fu_468_p2[0:0] === 1'b1) ? 3'd1 : add_ln256_fu_1268_p2);

assign out_V_V_TDATA = {{{{{{{{{{{{{{{{{{{{{{{{{select_ln265_24_reg_1471}, {select_ln265_23_reg_1465}}, {select_ln265_22_reg_1459}}, {select_ln265_21_reg_1453}}, {select_ln265_20_reg_1447}}, {select_ln265_19_reg_1441}}, {select_ln265_18_reg_1435}}, {select_ln265_17_reg_1429}}, {select_ln265_16_reg_1423}}, {select_ln265_15_reg_1417}}, {select_ln265_14_reg_1411}}, {select_ln265_13_reg_1405}}, {select_ln265_12_reg_1399}}, {select_ln265_11_reg_1393}}, {select_ln265_10_reg_1387}}, {select_ln265_9_reg_1381}}, {select_ln265_8_reg_1375}}, {select_ln265_7_reg_1369}}, {select_ln265_6_reg_1363}}, {select_ln265_5_reg_1357}}, {select_ln265_4_reg_1351}}, {select_ln265_3_reg_1345}}, {select_ln265_2_reg_1339}}, {select_ln265_1_reg_1333}}, {select_ln265_reg_1327}};

assign select_ln256_10_fu_554_p3 = ((icmp_ln256_fu_468_p2[0:0] === 1'b1) ? 8'd0 : ap_phi_mux_buf_V_14_1_phi_fu_284_p4);

assign select_ln256_11_fu_562_p3 = ((icmp_ln256_fu_468_p2[0:0] === 1'b1) ? 8'd0 : ap_phi_mux_buf_V_13_1_phi_fu_295_p4);

assign select_ln256_12_fu_570_p3 = ((icmp_ln256_fu_468_p2[0:0] === 1'b1) ? 8'd0 : ap_phi_mux_buf_V_12_1_phi_fu_306_p4);

assign select_ln256_13_fu_578_p3 = ((icmp_ln256_fu_468_p2[0:0] === 1'b1) ? 8'd0 : ap_phi_mux_buf_V_11_1_phi_fu_317_p4);

assign select_ln256_14_fu_586_p3 = ((icmp_ln256_fu_468_p2[0:0] === 1'b1) ? 8'd0 : ap_phi_mux_buf_V_10_1_phi_fu_328_p4);

assign select_ln256_15_fu_594_p3 = ((icmp_ln256_fu_468_p2[0:0] === 1'b1) ? 8'd0 : ap_phi_mux_buf_V_9_1_phi_fu_339_p4);

assign select_ln256_16_fu_602_p3 = ((icmp_ln256_fu_468_p2[0:0] === 1'b1) ? 8'd0 : ap_phi_mux_buf_V_8_1_phi_fu_350_p4);

assign select_ln256_17_fu_610_p3 = ((icmp_ln256_fu_468_p2[0:0] === 1'b1) ? 8'd0 : ap_phi_mux_buf_V_7_1_phi_fu_361_p4);

assign select_ln256_18_fu_618_p3 = ((icmp_ln256_fu_468_p2[0:0] === 1'b1) ? 8'd0 : ap_phi_mux_buf_V_6_1_phi_fu_372_p4);

assign select_ln256_19_fu_626_p3 = ((icmp_ln256_fu_468_p2[0:0] === 1'b1) ? 8'd0 : ap_phi_mux_buf_V_5_1_phi_fu_383_p4);

assign select_ln256_1_fu_482_p3 = ((icmp_ln256_fu_468_p2[0:0] === 1'b1) ? 8'd0 : ap_phi_mux_buf_V_23_1_phi_fu_185_p4);

assign select_ln256_20_fu_634_p3 = ((icmp_ln256_fu_468_p2[0:0] === 1'b1) ? 8'd0 : ap_phi_mux_buf_V_4_1_phi_fu_394_p4);

assign select_ln256_21_fu_642_p3 = ((icmp_ln256_fu_468_p2[0:0] === 1'b1) ? 8'd0 : ap_phi_mux_buf_V_3_1_phi_fu_405_p4);

assign select_ln256_22_fu_650_p3 = ((icmp_ln256_fu_468_p2[0:0] === 1'b1) ? 8'd0 : ap_phi_mux_buf_V_2_1_phi_fu_416_p4);

assign select_ln256_23_fu_658_p3 = ((icmp_ln256_fu_468_p2[0:0] === 1'b1) ? 8'd0 : ap_phi_mux_buf_V_1_1_phi_fu_427_p4);

assign select_ln256_24_fu_666_p3 = ((icmp_ln256_fu_468_p2[0:0] === 1'b1) ? 8'd0 : ap_phi_mux_buf_V_0_1_phi_fu_438_p4);

assign select_ln256_2_fu_490_p3 = ((icmp_ln256_fu_468_p2[0:0] === 1'b1) ? 8'd0 : ap_phi_mux_buf_V_22_1_phi_fu_196_p4);

assign select_ln256_3_fu_498_p3 = ((icmp_ln256_fu_468_p2[0:0] === 1'b1) ? 8'd0 : ap_phi_mux_buf_V_21_1_phi_fu_207_p4);

assign select_ln256_4_fu_506_p3 = ((icmp_ln256_fu_468_p2[0:0] === 1'b1) ? 8'd0 : ap_phi_mux_buf_V_20_1_phi_fu_218_p4);

assign select_ln256_5_fu_514_p3 = ((icmp_ln256_fu_468_p2[0:0] === 1'b1) ? 8'd0 : ap_phi_mux_buf_V_19_1_phi_fu_229_p4);

assign select_ln256_6_fu_522_p3 = ((icmp_ln256_fu_468_p2[0:0] === 1'b1) ? 8'd0 : ap_phi_mux_buf_V_18_1_phi_fu_240_p4);

assign select_ln256_7_fu_530_p3 = ((icmp_ln256_fu_468_p2[0:0] === 1'b1) ? 8'd0 : ap_phi_mux_buf_V_17_1_phi_fu_251_p4);

assign select_ln256_8_fu_538_p3 = ((icmp_ln256_fu_468_p2[0:0] === 1'b1) ? 8'd0 : ap_phi_mux_buf_V_16_1_phi_fu_262_p4);

assign select_ln256_9_fu_546_p3 = ((icmp_ln256_fu_468_p2[0:0] === 1'b1) ? 8'd0 : ap_phi_mux_buf_V_15_1_phi_fu_273_p4);

assign select_ln256_fu_474_p3 = ((icmp_ln256_fu_468_p2[0:0] === 1'b1) ? 8'd0 : ap_phi_mux_buf_V_24_1_phi_fu_174_p4);

assign select_ln265_10_fu_924_p3 = ((icmp_ln895_10_fu_918_p2[0:0] === 1'b1) ? buf_10_V_fu_908_p4 : select_ln256_14_fu_586_p3);

assign select_ln265_11_fu_948_p3 = ((icmp_ln895_11_fu_942_p2[0:0] === 1'b1) ? buf_11_V_fu_932_p4 : select_ln256_13_fu_578_p3);

assign select_ln265_12_fu_972_p3 = ((icmp_ln895_12_fu_966_p2[0:0] === 1'b1) ? buf_12_V_fu_956_p4 : select_ln256_12_fu_570_p3);

assign select_ln265_13_fu_996_p3 = ((icmp_ln895_13_fu_990_p2[0:0] === 1'b1) ? buf_13_V_fu_980_p4 : select_ln256_11_fu_562_p3);

assign select_ln265_14_fu_1020_p3 = ((icmp_ln895_14_fu_1014_p2[0:0] === 1'b1) ? buf_14_V_fu_1004_p4 : select_ln256_10_fu_554_p3);

assign select_ln265_15_fu_1044_p3 = ((icmp_ln895_15_fu_1038_p2[0:0] === 1'b1) ? buf_15_V_fu_1028_p4 : select_ln256_9_fu_546_p3);

assign select_ln265_16_fu_1068_p3 = ((icmp_ln895_16_fu_1062_p2[0:0] === 1'b1) ? buf_16_V_fu_1052_p4 : select_ln256_8_fu_538_p3);

assign select_ln265_17_fu_1092_p3 = ((icmp_ln895_17_fu_1086_p2[0:0] === 1'b1) ? buf_17_V_fu_1076_p4 : select_ln256_7_fu_530_p3);

assign select_ln265_18_fu_1116_p3 = ((icmp_ln895_18_fu_1110_p2[0:0] === 1'b1) ? buf_18_V_fu_1100_p4 : select_ln256_6_fu_522_p3);

assign select_ln265_19_fu_1140_p3 = ((icmp_ln895_19_fu_1134_p2[0:0] === 1'b1) ? buf_19_V_fu_1124_p4 : select_ln256_5_fu_514_p3);

assign select_ln265_1_fu_708_p3 = ((icmp_ln895_1_fu_702_p2[0:0] === 1'b1) ? buf_1_V_fu_692_p4 : select_ln256_23_fu_658_p3);

assign select_ln265_20_fu_1164_p3 = ((icmp_ln895_20_fu_1158_p2[0:0] === 1'b1) ? buf_20_V_fu_1148_p4 : select_ln256_4_fu_506_p3);

assign select_ln265_21_fu_1188_p3 = ((icmp_ln895_21_fu_1182_p2[0:0] === 1'b1) ? buf_21_V_fu_1172_p4 : select_ln256_3_fu_498_p3);

assign select_ln265_22_fu_1212_p3 = ((icmp_ln895_22_fu_1206_p2[0:0] === 1'b1) ? buf_22_V_fu_1196_p4 : select_ln256_2_fu_490_p3);

assign select_ln265_23_fu_1236_p3 = ((icmp_ln895_23_fu_1230_p2[0:0] === 1'b1) ? buf_23_V_fu_1220_p4 : select_ln256_1_fu_482_p3);

assign select_ln265_24_fu_1260_p3 = ((icmp_ln895_24_fu_1254_p2[0:0] === 1'b1) ? buf_24_V_fu_1244_p4 : select_ln256_fu_474_p3);

assign select_ln265_2_fu_732_p3 = ((icmp_ln895_2_fu_726_p2[0:0] === 1'b1) ? buf_2_V_fu_716_p4 : select_ln256_22_fu_650_p3);

assign select_ln265_3_fu_756_p3 = ((icmp_ln895_3_fu_750_p2[0:0] === 1'b1) ? buf_3_V_fu_740_p4 : select_ln256_21_fu_642_p3);

assign select_ln265_4_fu_780_p3 = ((icmp_ln895_4_fu_774_p2[0:0] === 1'b1) ? buf_4_V_fu_764_p4 : select_ln256_20_fu_634_p3);

assign select_ln265_5_fu_804_p3 = ((icmp_ln895_5_fu_798_p2[0:0] === 1'b1) ? buf_5_V_fu_788_p4 : select_ln256_19_fu_626_p3);

assign select_ln265_6_fu_828_p3 = ((icmp_ln895_6_fu_822_p2[0:0] === 1'b1) ? buf_6_V_fu_812_p4 : select_ln256_18_fu_618_p3);

assign select_ln265_7_fu_852_p3 = ((icmp_ln895_7_fu_846_p2[0:0] === 1'b1) ? buf_7_V_fu_836_p4 : select_ln256_17_fu_610_p3);

assign select_ln265_8_fu_876_p3 = ((icmp_ln895_8_fu_870_p2[0:0] === 1'b1) ? buf_8_V_fu_860_p4 : select_ln256_16_fu_602_p3);

assign select_ln265_9_fu_900_p3 = ((icmp_ln895_9_fu_894_p2[0:0] === 1'b1) ? buf_9_V_fu_884_p4 : select_ln256_15_fu_594_p3);

assign select_ln265_fu_684_p3 = ((icmp_ln895_fu_678_p2[0:0] === 1'b1) ? buf_0_V_fu_674_p1 : select_ln256_24_fu_666_p3);

endmodule //StreamingMaxPool_Batch_0_StreamingMaxPool_Pre
